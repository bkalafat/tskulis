# Docker ignore file for TS Kulis
# Optimizes Docker build context by excluding unnecessary files

# Version control
.git
.gitignore
.github/

# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment files (use build args instead)
.env
.env.local
.env.development
.env.test
.env.production
.env.staging

# Next.js build outputs (will be built in container)
.next/
out/
build/
dist/

# Test files and coverage
coverage/
test-results/
playwright-report/
__tests__/
**/*.test.js
**/*.test.ts
**/*.test.tsx
**/*.spec.js
**/*.spec.ts
**/*.spec.tsx
jest.config.js
jest.setup.ts

# Development files
*.log
logs/
.DS_Store
.vscode/
.idea/
*.swp
*.swo
*~

# TypeScript coverage
coverage-ts/

# Bundle analysis
analyze/

# Performance reports (generated in container)
lighthouse-reports/

# Deployment files
scripts/deploy/
docker-compose*.yml
Dockerfile*

# Backup files
backups/

# Documentation
*.md
docs/

# CI/CD files
.cicd-config.yml

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# IDE files
.vscode/
.idea/
*.sublime-project
*.sublime-workspace

# Temporary files
tmp/
temp/
*.tmp
*.temp

# Lock files (use npm ci instead)
package-lock.json
yarn.lock

# Local development certificates
*.pem
*.key
*.crt

# Firebase
.firebase/

# Vercel
.vercel/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# rollup.js default build output
dist/

# Uncomment the public line if your project uses Gatsby
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/